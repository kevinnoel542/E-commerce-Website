#!/usr/bin/env python3
"""
Test script to verify all required imports work correctly
"""

def test_imports():
    """Test all critical imports"""
    try:
        print("Testing FastAPI imports...")
        from fastapi import FastAPI
        print("‚úÖ FastAPI imported successfully")
        
        print("Testing JWT imports...")
        import jwt
        print("‚úÖ JWT imported successfully")
        
        print("Testing Passlib imports...")
        from passlib.context import CryptContext
        print("‚úÖ Passlib imported successfully")
        
        print("Testing Supabase imports...")
        from supabase import create_client
        print("‚úÖ Supabase imported successfully")
        
        print("Testing Pydantic imports...")
        from pydantic import BaseModel
        print("‚úÖ Pydantic imported successfully")
        
        print("Testing Requests imports...")
        import requests
        print("‚úÖ Requests imported successfully")
        
        print("Testing Python-dotenv imports...")
        from dotenv import load_dotenv
        print("‚úÖ Python-dotenv imported successfully")
        
        print("\nüéâ All imports successful! Your environment is ready.")
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("\nPlease install missing packages:")
        print("pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False

def test_jwt_functionality():
    """Test JWT encoding/decoding"""
    try:
        print("\nTesting JWT functionality...")
        import jwt
        
        # Test data
        payload = {"user_id": "123", "email": "test@example.com"}
        secret = "test-secret"
        
        # Encode
        token = jwt.encode(payload, secret, algorithm="HS256")
        print("‚úÖ JWT encoding successful")
        
        # Decode
        decoded = jwt.decode(token, secret, algorithms=["HS256"])
        print("‚úÖ JWT decoding successful")
        
        if decoded == payload:
            print("‚úÖ JWT payload matches")
            return True
        else:
            print("‚ùå JWT payload mismatch")
            return False
            
    except Exception as e:
        print(f"‚ùå JWT test failed: {e}")
        return False

def test_password_hashing():
    """Test password hashing"""
    try:
        print("\nTesting password hashing...")
        from passlib.context import CryptContext
        
        pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
        
        # Hash password
        password = "test123"
        hashed = pwd_context.hash(password)
        print("‚úÖ Password hashing successful")
        
        # Verify password
        is_valid = pwd_context.verify(password, hashed)
        if is_valid:
            print("‚úÖ Password verification successful")
            return True
        else:
            print("‚ùå Password verification failed")
            return False
            
    except Exception as e:
        print(f"‚ùå Password hashing test failed: {e}")
        return False

if __name__ == "__main__":
    print("üîç Testing E-Commerce Backend Dependencies\n")
    
    imports_ok = test_imports()
    jwt_ok = test_jwt_functionality()
    password_ok = test_password_hashing()
    
    if imports_ok and jwt_ok and password_ok:
        print("\nüéâ All tests passed! You can now run the application:")
        print("uvicorn app.main:app --reload")
    else:
        print("\n‚ùå Some tests failed. Please fix the issues above.")
        print("\nTry running:")
        print("pip install --upgrade pip")
        print("pip install -r requirements.txt")
